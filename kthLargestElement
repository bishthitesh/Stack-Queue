/*
* Write a code to find the kth largest number of the given sequence in a stack.
* Your program should take the following lines of input:

    The number of elements in the input stack.
    The elements in the input stack.
    The value of ‘k’.*/

import java.util.*;

public class kthLargestElement {
    // This function returns the sorted stack
    public static Stack < Integer > sortStack(Stack < Integer > input) {
        //write your code here
        Stack<Integer> tempStack=new Stack();
        int tempValue;
        while (!input.isEmpty()){
            tempValue=input.pop();
            while (!tempStack.isEmpty() && tempValue<tempStack.peek()){
                input.push(tempStack.pop());
            }
            tempStack.push(tempValue);
        }
        //System.out.println(tempStack);
        return tempStack;
    }

    public static void findKthLargestNum(Stack <Integer> sortedStack, int k) {
        //write your code here
        try {
        for (int i=0;i<k-1;i++){
            sortedStack.pop();
        }
        System.out.println(sortedStack.pop());}
        catch (Exception e){
            System.out.println("Stack is empty");
        }
    }


    public static void main(String args[]) {
        Stack < Integer > inputStack = new Stack < Integer > ();
        Scanner in = new Scanner(System.in);
        int n = in .nextInt();
        for (int i = 0; i < n; i++) {
            inputStack.add( in .nextInt());
        }

        if (inputStack.isEmpty()) {
            System.out.println("stack is empty");
            System.exit(0);
        }

        int k = in .nextInt();
        if (k > inputStack.size()) {
            System.out.println("invalid input");
            System.exit(0);
        }

        // This is the temporary stack

        Stack < Integer > temp = sortStack(inputStack);
        findKthLargestNum(temp, k);

    }
}
